networks:
  frontend:
  backend:

volumes:
  pgdata:
  opdata:

x-op-restart-policy: &restart_policy
  restart: unless-stopped
x-op-image: &image
  image: openproject/openproject:${TAG:-15-slim}
x-op-app: &app
  <<: [*image, *restart_policy]
  environment:
    SMTP_ADDRESS: "smtp.gmail.com"
    SMTP_PORT: "587"
    SMTP_DOMAIN: "smtp.gmail.com"
    SMTP_USER_NAME: "${SMTP_USER_NAME:-your@gmail.com}"
    SMTP_PASSWORD: "${SMTP_PASSWORD:-password}"
    SMTP_AUTHENTICATION: "plain"

    OPENPROJECT_HTTPS: "${OPENPROJECT_HTTPS:-true}"
    OPENPROJECT_HOST__NAME: "${OPENPROJECT_HOST__NAME:-localhost:8080}"
    OPENPROJECT_HSTS: "${OPENPROJECT_HSTS:-true}"
    RAILS_CACHE_STORE: "memcache"
    OPENPROJECT_CACHE__MEMCACHE__SERVER: "cache:11211"
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    DATABASE_URL: "${DATABASE_URL:-postgres://postgres:${PASS}/openproject?pool=20&encoding=unicode&reconnect=true}"
    RAILS_MIN_THREADS: ${RAILS_MIN_THREADS:-4}
    RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-16}
    # set to true to enable the email receiving feature. See ./docker/cron for more options
    IMAP_ENABLED: "${IMAP_ENABLED:-true}"
  volumes:
    - "${OPDATA:-opdata}:/var/openproject/assets"

services:
  db:
    container_name: db
    image: postgres:13
    <<: *restart_policy
    stop_grace_period: "3s"
    volumes:
      - "${PGDATA:-pgdata}:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-p4ssw0rd}
      POSTGRES_DB: openproject
    networks:
      - backend

  cache:
    container_name: cache
    image: memcached
    <<: *restart_policy
    networks:
      - backend

  proxy:
    build:
      context: ./proxy
      args:
        APP_HOST: web
    image: openproject/proxy
    <<: *restart_policy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - frontend
  # nginx:
  #   container_name: nginx
  #   image: nginx
  #   volumes:
  #     - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro # Arquivo principal
  #     - ./proxy/default.conf:/etc/nginx/conf.d/default.conf:ro # Arquivo do servidor
  #     - ./var/certbot/www:/var/www/certbot # Volume para Certbot
  #     - /etc/letsencrypt:/etc/letsencrypt # Volume para certificados SSL
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - web
  #   networks:
  #     - frontend

  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./var/certbot/www:/var/www/certbot # Volume para arquivos temporÃ¡rios
  #     - /etc/letsencrypt:/etc/letsencrypt # Volume para certificados
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 1d; done'"
  #   networks:
  #     - frontend

  web:
    container_name: web
    <<: *app
    ports:
      - "8080"
    command: "./docker/prod/web"
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - cache
      - seeder
    labels:
      - autoheal=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}/health_checks/default"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  autoheal:
    image: willfarrell/autoheal:1.2.0
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      AUTOHEAL_CONTAINER_LABEL: autoheal
      AUTOHEAL_START_PERIOD: 600
      AUTOHEAL_INTERVAL: 30

  worker:
    <<: *app
    container_name: worker
    command: "./docker/prod/worker"
    networks:
      - backend
    depends_on:
      - db
      - cache
      - seeder

  cron:
    <<: *app
    container_name: cron
    command: "./docker/prod/cron"
    networks:
      - backend
    depends_on:
      - db
      - cache
      - seeder

  seeder:
    <<: *app
    container_name: seeder
    command: "./docker/prod/seeder"
    restart: on-failure
    networks:
      - backend